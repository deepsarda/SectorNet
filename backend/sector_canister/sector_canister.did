type ChatSecurityModel = variant { HighSecurityE2EE; StandardAccessControl };
type CryptoState = record { current_key_epoch : nat32; rekey_required : bool };
type Error = variant {
  CallFailed : text;
  NotFound : text;
  ValidationError : text;
  Unauthorized : text;
  AlreadyExists : text;
  ConfigError : text;
  InvalidState : text;
};
type Message = record {
  id : text;
  encrypted_content_markdown : blob;
  author_principal : principal;
  timestamp : nat64;
  key_epoch_id : nat32;
};
type Post = record {
  id : text;
  status : PostStatus;
  encrypted_content_markdown : blob;
  author_principal : principal;
  timestamp : nat64;
  global_post_id : opt nat64;
};
type PostStatus = variant { Private; ApprovedGlobal; PendingGlobal };
type Result = variant { Ok; Err : Error };
type Result_1 = variant { Ok : text; Err : Error };
type Result_2 = variant { Ok : vec principal; Err : Error };
type Result_3 = variant { Ok : vec Message; Err : Error };
type Result_4 = variant { Ok : SectorDetails; Err : Error };
type SectorConfig = record {
  security_model : ChatSecurityModel;
  owner : principal;
  name : text;
  description : text;
  is_private : bool;
  abbreviation : text;
};
type SectorDetails = record {
  current_key_epoch : nat32;
  my_role : SectorRole;
  name : text;
  description : text;
  is_private : bool;
  rekey_required : bool;
  channels : vec text;
  abbreviation : text;
};
type SectorRole = variant { Poster; Member; Moderator };
service : (SectorConfig, principal, principal, principal) -> {
  approve_global_post : (text, text) -> (Result);
  create_channel : (text) -> (Result);
  create_invite_code : () -> (Result_1);
  create_post : (blob, bool) -> (Result_1);
  get_crypto_state : () -> (CryptoState) query;
  get_members : () -> (Result_2) query;
  get_messages : (text, nat64, opt text) -> (Result_3) query;
  get_my_details : () -> (Result_4) query;
  get_sector_feed : (nat64, nat64) -> (vec Post) query;
  join : () -> (Result);
  leave : () -> (Result);
  rotate_sector_key : (vec record { principal; blob }) -> (Result);
  send_message : (text, blob, nat32) -> (Result_1);
  set_sector_role : (principal, SectorRole) -> (Result);
}
